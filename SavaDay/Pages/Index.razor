@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStore

<h1>Dashboard</h1>

<p>
    Welcome to your new app.
    <br />
    Here you can track your savings.
    <br />
    Go to <b><a href="/settings">Settings</a></b> and set daily saving increment. 
    <br />
    On your way to SavaDay!
    <br />
    <br />    
    Your last known balance is: @lastBalance <br />
    The last day of year the app was used is: @lastUsedDate <br />
    Today day of year number is: @today <br />
    Projected savings for today will be: @projectedBalance 
    <br />
</p>

@code {
    /// <summary>
    /// local storage usage
    /// </summary>
    const string balanceKey = "lastBalance";
    const string lastDayKey = "lastUsedDay";

    double lastBalance;
    double projectedBalance;
    int today = DateTime.Now.DayOfYear;
    int lastUsedDate;

    public async void UpdateLocalStorage()
    {
        UserModel.CalculateAmount();
        lastBalance += UserModel.TotalAmount;
        await localStore.SetItemAsync(balanceKey, lastBalance);
        await localStore.SetItemAsync(lastDayKey, today);
    }

    public async void ClearLocalStorage()
    {
        lastBalance = 0;
        await localStore.ClearAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        lastBalance = await localStore.GetItemAsync<double>(balanceKey);
        lastUsedDate = await localStore.GetItemAsync<int>(lastDayKey);
        projectedBalance = UserModel.CalcOnlyAmount(lastUsedDate, today);
    }
}

<p>
    Current increment settngs: <b>@AppData.IncrementAmount.ToString(format: "0.00")</b> <br />
    Total Days: <b>@UserModel.TotalDaysText</b><br />
    Total amount for saving: <b>@UserModel.TotalAmount.ToString(format: "0.00")</b><br />
    Current date: <b>@UserModel.Date</b> @*, you selected @date1*@
</p>

<EditForm Model="@UserModel" OnValidSubmit="HandleValidSubmit" class="form-check-inline">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="start1">Start date:</label>

        <InputNumber min="1" class="form-control" id="startForm" @bind-Value="UserModel.StartDay"></InputNumber>
    </div>
    <br />

    <div class="form-group">
        <label for="end">End date:</label>

        <InputNumber min="1" class="form-control" id="endForm" @bind-Value="UserModel.EndDay"></InputNumber>
    </div>
    <br />
    <div class="form-group">
        <label for="beginAmount">Begin amount:</label>
        <div class="input-group-prepend">
            <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>

            <InputNumber step="0.01" inputmode="decimal" min="0" class="form-control" id="beginAmountForm" @bind-Value="UserModel.BeginAmount"></InputNumber>
        </div>
    </div>
    <br />
</EditForm>
<br />

<button class="btn btn-primary" @onclick="UpdateLocalStorage">Calculate</button>
<button class="btn btn-primary" @onclick="UserModel.Reset">Reset</button>
<br />
<br />

@* Test table, currently it auto updates and it should not *@
NON WORKING ZONE<br />
NON WORKING ZONE<br />
NON WORKING ZONE<br />
<br />
TODO: fill table with day inrements and ability to check them off
<br />
<br />
<p>For example here is possible scenario for savings trough the year:</p>
<table class="table table-striped table-bordered table-sm">
    <thead>
        <tr>
            @for (int col = 0; col <= AppData.RowUserDateSelection; col++)
            {
                <th>Day @col</th>
            }
        </tr>
    </thead>
    <tbody>
        @for (int row = 1; row <= AppData.ColUserDateSelection; row++)
        {
            <tr>
                <th>Month @row</th>

                @for (int col = 1; col <= AppData.RowUserDateSelection; col++)
                {
                    <td>
                        @if (true)
                        {
                            tempIncr += 0.01;
                            @tempIncr.ToString("0.00");
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    private double tempIncr = 0.00;

    private UserModel UserModel = new UserModel();

    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    private void Test()
    {
        Console.WriteLine(UserModel.CalcOnlyAmount(lastUsedDate, today));
    }
}

<button class="btn btn-info" @onclick="ClearLocalStorage">Clear last balance from localStorage</button>
<button class="btn btn-primary" @onclick="Test">test</button>
<br />
<p></p>